import unittest
import optics_callables
import numpy as N
from ray_bundle import RayBundle
from flat_surface import FlatGeometryManager

class TestReflective(unittest.TestCase):
    def setUp(self):
        """Set up the ray bundle and geometry"""
        dir = N.c_[[1, 1, -1], [-1, 1, -1], [-1, -1, -1], [1, -1, -1]] / N.sqrt(3)
        position = N.c_[[0,0,1], [1,-1,1], [1,1,1], [-1,1,1]]

        self._bund = RayBundle()
        self._bund.set_vertices(position)
        self._bund.set_directions(dir)
        self._bund.set_energy(N.r_[100, 200, 300, 400])
        self._bund.set_ref_index(N.r_[1, 1, 1, 1])

        self.gm = FlatGeometryManager()
        self.prm = self.gm.find_intersections(N.eye(4), self._bund)
    
    def test_with_absorptivity(self):
        """A correct bundle is generated by reflective, with energy reduced correctly"""
        reflective = optics_callables.gen_reflective(0.1)
        outg = reflective(self.gm, self._bund, N.ones(4, dtype=N.bool))
        
        correct_pts = N.zeros((3,4))
        correct_pts[:2,0] = 1
        N.testing.assert_array_equal(outg.get_vertices(), correct_pts)
        
        correct_dirs = N.c_[[1, 1, 1], [-1, 1, 1], [-1, -1, 1], [1, -1, 1]] / N.sqrt(3)
        N.testing.assert_array_equal(outg.get_directions(), correct_dirs)
        
        N.testing.assert_array_equal(outg.get_energy(), N.r_[90, 180, 270, 360])
        N.testing.assert_array_equal(outg.get_parent(), N.arange(4))
    
    def test_without_absorptivity(self):
        """Perfect mirroring works"""
        reflective = optics_callables.gen_reflective(0)
        outg = reflective(self.gm, self._bund, N.ones(4, dtype=N.bool))
        N.testing.assert_array_equal(outg.get_energy(), N.r_[100, 200, 300, 400])
